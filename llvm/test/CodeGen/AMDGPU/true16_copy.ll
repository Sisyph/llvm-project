; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=amdgcn -mcpu=gfx1100 < %s | FileCheck %s

; Check that we can copy from an sgpr to the high part of a vgpr without failing
; an assertion in SIInstrInfo::copyToPhysReg.

define amdgpu_cs void @f() {
; CHECK-LABEL: f:
; CHECK:       ; %bb.0: ; %bb
; CHECK-NEXT:    v_mov_b16_e32 v0.h, 0xff
; CHECK-NEXT:    v_mov_b16_e32 v0.l, 0
; CHECK-NEXT:    s_cbranch_scc1 .LBB0_2
; CHECK-NEXT:  .LBB0_1: ; %bb3
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_mov_b16_e32 v1.l, v0.h
; CHECK-NEXT:    v_and_b32_e32 v1, 0xff, v1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; CHECK-NEXT:    v_min_u16 v1, v1, 1
; CHECK-NEXT:    v_mov_b16_e32 v0.h, v1.l
; CHECK-NEXT:    s_cbranch_scc0 .LBB0_1
; CHECK-NEXT:  .LBB0_2: ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_mov_b16_e32 v0.h, v0.l
; CHECK-NEXT:    s_cbranch_scc1 .LBB0_2
; CHECK-NEXT:    s_branch .LBB0_1
bb:
  br label %bb1

bb1:
  %i = phi i8 [ -1, %bb ], [ %i6, %bb12 ]
  br label %bb2

bb2:
  br i1 undef, label %bb5, label %bb3

bb3:
  %i4 = call i8 @llvm.umin.i8(i8 %i, i8 1)
  br label %bb5

bb5:
  %i6 = phi i8 [ %i4, %bb3 ], [ 0, %bb2 ]
  br label %bb7

bb7:
  br label %bb8

bb8:
  br label %bb9

bb9:
  br label %bb10

bb10:
  br label %bb11

bb11:
  br label %bb12

bb12:
  br i1 false, label %bb13, label %bb1

bb13:
  %i14 = icmp eq i8 %i, 0
  %i15 = zext i1 %i14 to i32
  br label %bb16

bb16:
  %i17 = or i32 0, %i15
  ret void
}

; Check that we don't try to emit v_mov_b16 with an fp inline constant operand
; like 1.0, because they don't work as expected in _b16 instructions.

define amdgpu_cs half @v_mov_b16_inline(half %arg) {
; CHECK-LABEL: v_mov_b16_inline:
; CHECK:       ; %bb.0: ; %bb
; CHECK-NEXT:    v_mov_b16_e32 v1.l, 0x3c00
; CHECK-NEXT:  .LBB1_1: ; %bb1
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; CHECK-NEXT:    v_mul_f16_e32 v1, v1, v0
; CHECK-NEXT:    s_branch .LBB1_1
bb:
  br label %bb1

bb1:
  %i = phi half [ 0xH3C00, %bb ], [ %i2, %bb1 ]
  %i2 = fmul half %i, %arg
  br label %bb1

bb2:
  ret half %i2
}

declare i8 @llvm.umin.i8(i8, i8)
