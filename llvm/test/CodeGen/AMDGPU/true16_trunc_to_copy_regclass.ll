; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -march=amdgcn -mcpu=gfx1100 -stop-after=amdgpu-isel -verify-machineinstrs < %s | FileCheck -check-prefix=CHECK %s

  ; Function Attrs: nounwind
  define amdgpu_cs void @_amdgpu_cs_main(<4 x i32> inreg %buf_in, <4 x i32> inreg %buf_out, i32 inreg %idx0, i32 inreg %idx1, i32 inreg %idx2) {
  ; CHECK-LABEL: name: _amdgpu_cs_main
  ; CHECK: bb.0..entry:
  ; CHECK-NEXT:   liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $sgpr4, $sgpr5, $sgpr6, $sgpr7, $sgpr8, $sgpr9, $sgpr10
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:sgpr_32 = COPY $sgpr10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:sgpr_32 = COPY $sgpr9
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:sgpr_32 = COPY $sgpr8
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:sgpr_32 = COPY $sgpr7
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:sgpr_32 = COPY $sgpr6
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:sgpr_32 = COPY $sgpr5
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:sgpr_32 = COPY $sgpr4
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:sgpr_32 = COPY $sgpr3
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:sgpr_32 = COPY $sgpr2
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:sgpr_32 = COPY $sgpr1
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:sgpr_32 = COPY $sgpr0
  ; CHECK-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sgpr_128 = REG_SEQUENCE [[COPY6]], %subreg.sub0, [[COPY5]], %subreg.sub1, [[COPY4]], %subreg.sub2, [[COPY3]], %subreg.sub3
  ; CHECK-NEXT:   [[REG_SEQUENCE1:%[0-9]+]]:sgpr_128 = REG_SEQUENCE [[COPY10]], %subreg.sub0, [[COPY9]], %subreg.sub1, [[COPY8]], %subreg.sub2, [[COPY7]], %subreg.sub3
  ; CHECK-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 0
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:vgpr_32 = COPY [[COPY2]]
  ; CHECK-NEXT:   [[BUFFER_LOAD_USHORT_OFFEN:%[0-9]+]]:vgpr_32 = BUFFER_LOAD_USHORT_OFFEN [[COPY11]], [[REG_SEQUENCE1]], [[S_MOV_B32_]], 0, 0, 0, 0, implicit $exec :: (dereferenceable load (s16), align 1, addrspace 4)
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:sgpr_lo16 = COPY [[BUFFER_LOAD_USHORT_OFFEN]].lo16
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:vgpr_32 = COPY [[COPY1]]
  ; CHECK-NEXT:   [[BUFFER_LOAD_USHORT_OFFEN1:%[0-9]+]]:vgpr_32 = BUFFER_LOAD_USHORT_OFFEN [[COPY13]], [[REG_SEQUENCE1]], [[S_MOV_B32_]], 0, 0, 0, 0, implicit $exec :: (dereferenceable load (s16), align 1, addrspace 4)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:sgpr_lo16 = COPY [[BUFFER_LOAD_USHORT_OFFEN1]].lo16
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:vgpr_16 = COPY [[COPY12]]
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:vgpr_16 = COPY [[COPY14]]
  ; CHECK-NEXT:   %20:vgpr_16 = nnan nsz arcp contract afn reassoc nofpexcept V_ADD_F16_t16_e64 0, killed [[COPY15]], 0, killed [[COPY16]], 0, 0, implicit $mode, implicit $exec
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:sgpr_lo16 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:sgpr_lo16 = IMPLICIT_DEF
  ; CHECK-NEXT:   [[REG_SEQUENCE2:%[0-9]+]]:vgpr_32 = REG_SEQUENCE killed %20, %subreg.lo16, killed [[DEF]], %subreg.hi16
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:vgpr_32 = COPY [[COPY]]
  ; CHECK-NEXT:   BUFFER_STORE_SHORT_OFFEN_exact killed [[REG_SEQUENCE2]], [[COPY17]], killed [[REG_SEQUENCE]], [[S_MOV_B32_]], 0, 0, 0, 0, implicit $exec :: (dereferenceable store (s16), align 1, addrspace 4)
  ; CHECK-NEXT:   S_ENDPGM 0
  .entry:
    %0 = call i16 @llvm.amdgcn.raw.buffer.load.i16(<4 x i32> %buf_in, i32 %idx0, i32 0, i32 0)
    %1 = bitcast i16 %0 to half
    %2 = call i16 @llvm.amdgcn.raw.buffer.load.i16(<4 x i32> %buf_in, i32 %idx1, i32 0, i32 0)
    %3 = bitcast i16 %2 to half
    %4 = fadd reassoc nnan nsz arcp contract afn half %1, %3
    %5 = bitcast half %4 to <1 x i16>
    %6 = extractelement <1 x i16> %5, i64 0
    call void @llvm.amdgcn.raw.buffer.store.i16(i16 %6, <4 x i32> %buf_out, i32 %idx2, i32 0, i32 0)
    ret void
  }

  ; Function Attrs: nounwind readonly willreturn
  declare i16 @llvm.amdgcn.raw.buffer.load.i16(<4 x i32>, i32, i32, i32 immarg) #3

  ; Function Attrs: nounwind willreturn writeonly
  declare void @llvm.amdgcn.raw.buffer.store.i16(i16, <4 x i32>, i32, i32, i32 immarg) #4
