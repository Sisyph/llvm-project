# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -march=amdgcn -mcpu=gfx1100 -verify-machineinstrs  -start-before=greedy -stop-after=stack-slot-coloring -stress-regalloc=2 -o - %s | FileCheck -check-prefixes=GFX1100 %s
# RUN: llc -march=amdgcn -mcpu=gfx1100 -verify-machineinstrs  -start-before=greedy -stop-after=stack-slot-coloring -stress-regalloc=3 -o - %s | FileCheck -check-prefixes=GFX1100_3 %s


---
name: reuse_reg
tracksRegLiveness: true
liveins:
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX1100-LABEL: name: reuse_reg
    ; GFX1100: liveins: $vgpr0
    ; GFX1100-NEXT: {{  $}}
    ; GFX1100-NEXT: renamable $vgpr0_hi16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr0_lo16, 0, killed $vgpr0_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: renamable $vgpr0_hi16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr0_lo16, 0, killed $vgpr0_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: S_ENDPGM 0, implicit killed renamable $vgpr0_hi16, implicit killed renamable $vgpr0_lo16
    ; GFX1100_3-LABEL: name: reuse_reg
    ; GFX1100_3: liveins: $vgpr0
    ; GFX1100_3-NEXT: {{  $}}
    ; GFX1100_3-NEXT: renamable $vgpr0_hi16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr0_lo16, 0, killed $vgpr0_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: renamable $vgpr0_hi16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr0_lo16, 0, killed $vgpr0_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: S_ENDPGM 0, implicit killed renamable $vgpr0_hi16, implicit killed renamable $vgpr0_lo16
    %0:vgpr_16 = COPY $vgpr0_lo16
    %1:vgpr_16 = COPY $vgpr0_hi16
    %lohi:vgpr_16 = nofpexcept V_ADD_F16_t16_e64 0,%0, 0, %1, 0, 0, implicit $mode, implicit $exec
    %lolohi:vgpr_16 = nofpexcept V_ADD_F16_t16_e64 0,%0, 0, %lohi, 0, 0, implicit $mode, implicit $exec
    S_ENDPGM 0, implicit %lolohi, implicit %0
...

---
name: pack_add_two_ways
tracksRegLiveness: true
liveins:
machineFunctionInfo:
  stackPtrOffsetReg:  $sgpr32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; GFX1100-LABEL: name: pack_add_two_ways
    ; GFX1100: liveins: $vgpr0, $vgpr1
    ; GFX1100-NEXT: {{  $}}
    ; GFX1100-NEXT: SI_SPILL_V32_SAVE $vgpr1, %stack.0, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.0, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr1 = COPY killed renamable $vgpr0
    ; GFX1100-NEXT: renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0 = V_PK_ADD_F16 0, $vgpr1, 0, killed $vgpr0, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: SI_SPILL_V32_SAVE killed $vgpr0, %stack.1, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.1, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0_lo16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr1_lo16, 0, killed $vgpr0_lo16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: renamable $vgpr0 = COPY killed renamable $vgpr0_lo16
    ; GFX1100-NEXT: SI_SPILL_V32_SAVE killed $vgpr0, %stack.2, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.2, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0_lo16 = nofpexcept V_ADD_F16_t16_e64 0, killed $vgpr1_hi16, 0, killed $vgpr0_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: renamable $vgpr0 = COPY killed renamable $vgpr0_lo16
    ; GFX1100-NEXT: renamable $vgpr1 = SI_SPILL_V32_RESTORE %stack.2, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.2, addrspace 5)
    ; GFX1100-NEXT: renamable $vgpr0 = V_PACK_B32_F16_e64 0, killed $vgpr1, 0, killed $vgpr0, 0, 0, implicit $mode, implicit $exec
    ; GFX1100-NEXT: renamable $vgpr1 = SI_SPILL_V32_RESTORE %stack.1, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.1, addrspace 5)
    ; GFX1100-NEXT: V_CMP_EQ_F32_e32 killed $vgpr1, $vgpr0, implicit $mode, implicit $exec, implicit-def $vcc
    ; GFX1100-NEXT: S_ENDPGM 0, implicit killed renamable $vgpr0
    ; GFX1100_3-LABEL: name: pack_add_two_ways
    ; GFX1100_3: liveins: $vgpr0, $vgpr1
    ; GFX1100_3-NEXT: {{  $}}
    ; GFX1100_3-NEXT: renamable $vgpr2 = V_PK_ADD_F16 0, $vgpr0, 0, $vgpr1, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: SI_SPILL_V32_SAVE killed $vgpr2, %stack.0, $sgpr32, 0, implicit $exec :: (store (s32) into %stack.0, addrspace 5)
    ; GFX1100_3-NEXT: renamable $vgpr0_lo16 = nofpexcept V_ADD_F16_t16_e64 0, $vgpr0_lo16, 0, $vgpr1_lo16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: renamable $vgpr2 = COPY killed renamable $vgpr0_lo16
    ; GFX1100_3-NEXT: renamable $vgpr0_lo16 = nofpexcept V_ADD_F16_t16_e64 0, killed $vgpr0_hi16, 0, killed $vgpr1_hi16, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: renamable $vgpr0 = COPY killed renamable $vgpr0_lo16
    ; GFX1100_3-NEXT: renamable $vgpr0 = V_PACK_B32_F16_e64 0, killed $vgpr2, 0, killed $vgpr0, 0, 0, implicit $mode, implicit $exec
    ; GFX1100_3-NEXT: renamable $vgpr1 = SI_SPILL_V32_RESTORE %stack.0, $sgpr32, 0, implicit $exec :: (load (s32) from %stack.0, addrspace 5)
    ; GFX1100_3-NEXT: V_CMP_EQ_F32_e32 killed $vgpr1, $vgpr0, implicit $mode, implicit $exec, implicit-def $vcc
    ; GFX1100_3-NEXT: S_ENDPGM 0, implicit killed renamable $vgpr0
    %0:vgpr_32 = COPY $vgpr0
    %1:vgpr_32 = COPY $vgpr1
    %2:vgpr_32 = V_PK_ADD_F16 0, %0, 0, %1, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    %lo:vgpr_16 = nofpexcept V_ADD_F16_t16_e64 0,%0.lo16, 0,%1.lo16,0,0, implicit $mode, implicit $exec
    %temp_lo:vgpr_32 = COPY %lo
    %hi:vgpr_16 = nofpexcept V_ADD_F16_t16_e64 0,%0.hi16, 0,%1.hi16,0,0, implicit $mode, implicit $exec
    %temp_hi:vgpr_32 = COPY %hi
    ; V_PACK_B32_F16 expects VS_32, after true16 implementation it should take F16
    ; Without these copies, it should be doable with 3 registers
    %3:vgpr_32 = V_PACK_B32_F16_e64 0, %temp_lo, 0, %temp_hi, 0, 0, implicit $mode, implicit $exec
    ; If this test were run this cmp should always be true
    V_CMP_EQ_F32_e32 %2, %3, implicit $mode, implicit $exec, implicit-def $vcc
    S_ENDPGM 0, implicit %3
...


